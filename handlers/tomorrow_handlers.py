from aiogram import Router, F
from aiogram.types import CallbackQuery

from parser.pars import group_par, date
from parser.lexicon_pars import print_day

from keyboards.keyboard_creator import create_inline_kb

from DataBase.db_connect import *


router = Router()


@router.callback_query(F.data == 'tomorrow_button')
async def tomorrow(callback: CallbackQuery):
    user = session.query(User).filter(User.tg_id==callback.from_user.id).first()

    tomorrow = date(1)
    next_day = date(2)
    week_pars = group_par(user.group)

    if tomorrow in week_pars:
        check = print_day(tomorrow, week_pars, user.subgroup)
        if check != '–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π ü•≥':
            await callback.message.edit_text(
                text=f'`{check}`',
                parse_mode='MarkdownV2',
                reply_markup=create_inline_kb(2,
                                              menu_button='–ù–∞–∑–∞–¥',
                                              update_tomorrow='–û–±–Ω–æ–≤–∏—Ç—å')
            )
        else:
            await callback.message.edit_text(
            text=f'`{print_day(next_day, week_pars, user.subgroup)}`',
            parse_mode='MarkdownV2',
            reply_markup=create_inline_kb(2,
                                          menu_button='–ù–∞–∑–∞–¥',
                                          update_tomorrow='–û–±–Ω–æ–≤–∏—Ç—å')
            )
            await callback.answer(text='–ü–∞—Ä—ã –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    else:
        await callback.message.edit_text(
            text='–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ –±—É–¥–µ—Ç',
            reply_markup=create_inline_kb(1,
                                          menu_button='–ù–∞–∑–∞–¥'))
    await callback.answer()


@router.callback_query(F.data == 'update_tomorrow')
async def update_tomorrow(callback: CallbackQuery):
    user = session.query(User).filter(User.tg_id==callback.from_user.id).first()

    today = date(1)
    week_pars = group_par(user.group)

    if today in week_pars:
        check = print_day(today, week_pars, user.subgroup)
        if callback.message.text not in check:
            await callback.message.edit_text(
                text=f'`{check}`',
                parse_mode='MarkdownV2',
                reply_markup=callback.message.reply_markup
            )
            await callback.answer(text='–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ')

        else:
            await callback.answer(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚úÖ')
    else:
        await callback.message.edit_text(
            text='–∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ –±—É–¥–µ—Ç',
            reply_markup=create_inline_kb(2,
                                          menu_button='–ù–∞–∑–∞–¥'))
        await callback.answer(text='–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ')
